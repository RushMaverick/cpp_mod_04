To Do List:

abstract class AMateria:

concrete class Ice:
	- has a use(ICharacter&) method that displays the following message:
	- "* shoots an ice bolt at <target.name> *"
	- has a clone function that returns a new instance of the same type.

concrete class Cure:
	- has a use(ICharacter&) method that displays the following message:
	- "* heals <target.name>'s wounds *"
	- has a clone function that returns a new instance of the same type.

concrete class Character:
	- Inherits from ICharacter.
	- Has an inventory for 4 materias. (array of &AMateria[4])
	- Has a use(int, ICharacter&) will use the materia at the given position on the target given.
	  Passes it's target parameter to the AMateria::use function.
	- Has a constructor that takes it's name as a parameter. And ANY copy of a Character must be deep.


abstract class ICharacter:
	- Check subject.

concrete class MateriaSource:
	- learnMateria(AMateria *). Copies the Materia passed as a param and store it in memory for cloning later. 4 slots only.
	- createMateria(std::string const &). Returns a new Materia. The latter is a copy of the Materia previously learned by the MateriaSource whose type
	  equals the one passed as a parameter. Returns 0 if the type is unknown.
	- This class can learn "templates" of Materias to create when needed. You will be able to generate new Materia using just a string that identifies it's type.

abstract class IMateriaSource:
	- Check subject.